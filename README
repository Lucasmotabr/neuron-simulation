# ニューロン活動シミュレーション（Neuron Simulation）

このプログラムは、ニューロンの活動シミュレーションを効率的に行うための実装であり、  
**基本版** と **疎グラフ向け高速版** を備えています。  
正確性の確保、性能向上、検証のしやすさを意識して設計しました。

## 主な特徴
- **基本版**：問題文通りの実装で、小規模データや検証用に最適  
- **高速版**：アクティブなニューロンのみ処理し、疎グラフや大規模ケースで高速化  
- **検証モード**：基本版と高速版の出力一致と実行時間を比較  
- **ベンチマークモード**：大規模ランダムネットワークで性能を測定  

## 開発の経緯と改善の流れ

本プログラムは、試験問題で提示された **ニューロンの活動シミュレーション** をベースに開発しました。  
最初は標準入力からデータを受け取り、指定されたステップ数だけ状態更新を繰り返す **基本版** を実装しました。  
その後、以下のように段階的な改善を行いました。

---

### 1. 基本版の作成
- 与えられた `M` 個のニューロン状態としきい値を読み込み、  
  各ステップで「信号伝達」→「状態更新」を順に実行。
- 最終ステップ終了後、各ニューロンの状態を出力。
- 小規模データで正しく動作することを確認。

---

### 2. テキストファイル入力への対応
- 後続の問題でも同じ入力フォーマットを使えるよう、  
  **標準入力やファイルから直接読み込める仕様** に変更。
- `--stdin` オプションを追加し、テキストファイルをパイプで渡して処理可能に。

---

### 3. 高速化版の開発
- 制約条件から `N`（ステップ数）は最大 **10^6** に達する可能性があると判明。  
- 大規模データや長時間シミュレーションでは、  
  毎ステップ全ニューロンを計算するのは非効率。  
- そこで、**非活性ニューロンは信号を送らない** 性質を利用し、  
  アクティブニューロンのみ処理する **`fast` モード** を実装。

---

### 4. 検証モードの追加
- `--verify-stdin` で、**基本版** と **高速版** の出力一致と処理時間を比較。  
- 正しさの確認と性能比較を同時に実行可能。

---

### 5. ベンチマークモードの追加
- `--bench-demo` オプションを追加し、  
  大規模ランダムネットワークを生成して両方式の処理時間を比較。
  
- 実行例：
[Bench] M=20000, edges=60000, steps=500
baseline: 6.356s
fast : 5.026s

- 特に大規模かつ疎なネットワークで **fast モードが有効** であることを確認。

---

## 実行例

### 基本版
```bash
$ python3 q1.py --stdin < input_q1_case1.txt
1 0 1 1 0 1 1 1 1

### 高速版 
$ python3 q1.py --stdin-fast < input_q1_case1.txt
1 0 1 1 0 1 1 1 1

### 検証モード 
$ python3 q1.py --verify-stdin < input_q1_case2.txt
BASE : 0 0 0 1 0 0 1 0 0 0 1 0 1 0
FAST : 0 0 0 1 0 0 1 0 0 0 1 0 1 0
MATCH: True
time  baseline=0.036705s  fast=0.031777s

### ベンチマークモード
$ python3 q1.py --bench-demo
[Bench] M=200000, edges=600000, steps=1500
baseline: 158.145s
fast    : 124.714s

この構成により、正確性の確保 と 高速化効果の実証 の両立が可能になりました。
また、後続問題でも使い回せる柔軟な入力仕様になっています。